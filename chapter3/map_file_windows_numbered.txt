     1	#include <fcntl.h>
     2	#include <stdio.h>
     3	#include <stdlib.h>
     4	#include <string.h>
     5	#include <sys/stat.h>
     6	#include <sys/types.h>
     7	#include <Windows.h>
     8	
     9	int
    10	main(int argc, char *argv[])
    11	{
    12		char *pmaddr;
    13	
    14		if (argc != 2) {
    15			fprintf(stderr, "Usage: %s filename\n", argv[0]);
    16			exit(1);
    17		}
    18	
    19		/* Create the file or open if the file already exists */
    20		if ((fh = CreateFile(argv[1],
    21			GENERIC_READ | GENERIC_WRITE,
    22			0,
    23			NULL,
    24			OPEN_EXISTING,
    25			FILE_ATTRIBUTE_NORMAL,
    26			NULL)) == INVALID_HANDLE_VALUE) {
    27			fprintf(stderr, "CreateFileA, gle: 0x%08x",
    28				GetLastError());
    29			exit(1);
    30		}
    31	
    32		/* why are we doing this????  */
    33		DWORD filelen = GetFileSize(fh, NULL);
    34		if (filelen == 0) {
    35			fprintf(stderr, "GetFileSize, gle: 0x%08x",
    36				GetLastError());
    37			exit(1);
    38		}
    39	
    40		/* Create a file mapping object */
    41		HANDLE fmh = CreateFileMapping(fh,
    42			NULL, /* security attributes */
    43			PAGE_READWRITE,
    44			0,
    45			0,
    46			NULL);
    47	
    48		if (fmh == NULL) {
    49			fprintf(stderr, "CreateFileMapping, gle: 0x%08x",
    50				GetLastError());
    51			exit(1);
    52		}
    53	
    54		/* Map into our address space and get a pointer to the beginning */
    55		pmaddr = (char *)MapViewOfFileEx(fmh,
    56			FILE_MAP_ALL_ACCESS,
    57			0,
    58			0,
    59			filelen,
    60			NULL); /* hint address */
    61	
    62		if (pmaddr == NULL) {
    63			fprintf(stderr, "MapViewOfFileEx, gle: 0x%08x",
    64				GetLastError());
    65			exit(1);
    66		}
    67	
    68		/* On windows we can not close file handle when file is mmaped */
    69	
    70		/* store a string to the Persistent Memory */
    71		strcpy(pmaddr, "Hello, Persistent Memory!");
    72	
    73		/*
    74		* Insure changes are flushed to storage. The length
    75		* needs to be rounded up to a 4k page.
    76		*/
    77		if (FlushViewOfFile(pmaddr, 4096) == FALSE) {
    78			fprintf(stderr, "FlushViewOfFile, gle: 0x%08x",
    79				GetLastError());
    80			exit(1);
    81		}
    82	
    83		/* Do we need this since we explicitly flushed the modified page???? */
    84		if (FlushFileBuffers(fh) == FALSE) {
    85			fprintf(stderr, "FlushFileBuffers, gle: 0x%08x",
    86				GetLastError());
    87			exit(1);
    88		}
    89	
    90		printf("Done.\n");
    91	
    92		if (UnmapViewOfFile(pmaddr) == FALSE) {
    93			fprintf(stderr, "UnmapViewOfFile, gle: 0x%08x", GetLastError());
    94			exit(1);
    95		}
    96	
    97		CloseHandle(fmh);
    98		CloseHandle(fh);
    99	
   100		exit(0);
   101	}
