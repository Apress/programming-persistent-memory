     1	#include <err.h>
     2	#include <fcntl.h>
     3	#include <stdio.h>
     4	#include <stdlib.h>
     5	#include <string.h>
     6	#include <sys/mman.h>
     7	#include <sys/stat.h>
     8	#include <sys/types.h>
     9	#include <unistd.h>
    10	
    11	int
    12	main(int argc, char *argv[])
    13	{
    14		int fd;
    15		struct stat stbuf;
    16		char *pmaddr;
    17	
    18		if (argc != 2) {
    19			fprintf(stderr, "Usage: %s filename\n", argv[0]);
    20			exit(1);
    21		}
    22	
    23		if ((fd = open(argv[1], O_RDWR)) < 0)
    24			err(1, "open %s", argv[1]);
    25	
    26		if (fstat(fd, &stbuf) < 0)
    27			err(1, "stat %s", argv[1]);
    28	
    29		/*
    30		 * Map the file into our address space for read & write.
    31		 * Use MAP_SHARED so stores are visible to other programs.
    32		 */
    33		if ((pmaddr = mmap(NULL, stbuf.st_size,
    34					PROT_READ|PROT_WRITE,
    35					MAP_SHARED, fd, 0)) == MAP_FAILED)
    36			err(1, "mmap %s", argv[1]);
    37	
    38		/* don't need the fd anymore, the mapping stays around */
    39		close(fd);
    40	
    41		/* store a string to the Persistent Memory */
    42		strcpy(pmaddr, "Hello, Persistent Memory!");
    43	
    44		/*
    45		 * Simplest way to flush is to call msync(). The length
    46		 * needs to be rounded up to a 4k page.
    47		 */
    48		if (msync((void *)pmaddr, 4096, MS_SYNC) < 0)
    49			err(1, "msync");
    50	
    51		printf("Done.\n");
    52		exit(0);
    53	}
